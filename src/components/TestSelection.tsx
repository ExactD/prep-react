import React from 'react';
import { useNavigate } from 'react-router-dom';

const TestSelection: React.FC = () => {
  const navigate = useNavigate();

  const handleSelectTest = async (testId: number, stringId: string) => {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è user_id
      const profileResponse = await fetch('http://localhost:5414/profile', {
        method: 'GET',
        credentials: 'include',
      });

      if (!profileResponse.ok) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        navigate('/');
        return;
      }

      const userProfile = await profileResponse.json();
      const userId = userProfile.id;

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –∑ —á–∏—Å–ª–æ–≤–∏–º ID
      const response = await fetch('http://localhost:5414/test/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({
          user_id: userId,
          test_id: testId, // —á–∏—Å–ª–æ–≤–∏–π ID
          status: 1
        })
      });

      if (!response.ok) {
        throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç—É');
      }

      const data = await response.json();
      console.log('–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ:', data);

      // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–µ—Å—Ç—É –∑–∞ —Å—Ç—Ä–æ–∫–æ–≤–∏–º ID
      switch (stringId) {
        case 'Test1805':
          navigate('/test/math');
          break;
        case 'Test2024':
          navigate('/test/math');
          break;
        case 'BasicTest':
          navigate('/test/math');
          break;
        default:
          navigate('/test/math');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞:', error);
      // –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  };

  const tests = [
    {
      id: 1, // —á–∏—Å–ª–æ–≤–∏–π ID –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
      stringId: 'Test1805', // —Å—Ç—Ä–æ–∫–æ–≤–∏–π ID –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥—É
      name: '–¢–µ—Å—Ç 18.05.2024',
      description: '–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –∑–Ω–∞–Ω—å –∑ —ñ—Å—Ç–æ—Ä—ñ—ó',
      difficulty: 'easy',
      difficultyText: '–õ–µ–≥–∫–∏–π',
      questions: 22,
      time: '60 —Ö–≤'
    },
    {
      id: 2,
      stringId: 'Test2024',
      name: '–¢–µ—Å—Ç 2024',
      description: '–°—É—á–∞—Å–Ω—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó',
      difficulty: 'hard',
      difficultyText: '–°–∫–ª–∞–¥–Ω–∏–π',
      questions: 30,
      time: '45 —Ö–≤'
    },
    {
      id: 3,
      stringId: 'BasicTest',
      name: '–ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç',
      description: '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤',
      difficulty: 'medium',
      difficultyText: '–°–µ—Ä–µ–¥–Ω—ñ–π',
      questions: 15,
      time: '20 —Ö–≤'
    }
  ];

  return (
    <div className="test-selection">
      <div className="test-selection-container">
        <div className="test-selection-header">
          <h1 className="test-selection-title">–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç</h1>
          <p className="test-selection-subtitle">
            –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω—å
          </p>
        </div>

        <div className="tests-list">
          {tests.map((test) => (
            <div
              key={test.id}
              className="test-card"
              onClick={() => handleSelectTest(test.id, test.stringId)}
            >
              <div className="test-card-header">
                <h3 className="test-name">{test.name}</h3>
                <span className={`test-difficulty difficulty-${test.difficulty}`}>
                  {test.difficultyText}
                </span>
              </div>
              
              <p className="test-description">{test.description}</p>
              
              <div className="test-info">
                <span>üìù {test.questions} –ø–∏—Ç–∞–Ω—å</span>
                <span>‚è±Ô∏è {test.time}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default TestSelection;